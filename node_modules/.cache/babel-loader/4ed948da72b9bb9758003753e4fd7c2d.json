{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\angie\\\\Desktop\\\\REACT\\\\projects\\\\redux\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // import from redux\n\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux'; // helps inject store into components\n\nimport counterReducer from './store/reducers/counter';\nimport resultReducer from './store/reducers/result';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker'; // add thunk middleware to handle async calls\n// instead of returning an action, it'll return a function that will eventually dispatch an action -> run async code\n\nimport thunk from 'redux-thunk';\nvar rootReducer = combineReducers({\n  ctr: counterReducer,\n  res: resultReducer\n}); // create a middleware w/ nested functions\n\nvar logger = function logger(store) {\n  return function (next) {\n    return function (action) {\n      console.log('[Middleware] is dispatching this action from index.js:', action);\n      var result = next(action);\n      console.log('[Middleware]\\'s next/updated state:', store.getState());\n      return result;\n    };\n  };\n};\n\nvar composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nvar store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk))); // use Provider to hook the store to the application\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n})), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["C:\\Users\\angie\\Desktop\\REACT\\projects\\redux\\src\\index.js"],"names":["React","ReactDOM","createStore","combineReducers","applyMiddleware","compose","Provider","counterReducer","resultReducer","App","registerServiceWorker","thunk","rootReducer","ctr","res","logger","store","next","action","console","log","result","getState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAAwC;;AAExC,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAEA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC,C,CAEA;AACA;;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAMC,WAAW,GAAGT,eAAe,CAAC;AAChCU,EAAAA,GAAG,EAAEN,cAD2B;AAEhCO,EAAAA,GAAG,EAAEN;AAF2B,CAAD,CAAnC,C,CAKA;;AACA,IAAMO,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK,EAAI;AACpB,SAAO,UAAAC,IAAI,EAAI;AACX,WAAO,UAAAC,MAAM,EAAI;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ,EAAsEF,MAAtE;AACA,UAAMG,MAAM,GAAGJ,IAAI,CAACC,MAAD,CAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDJ,KAAK,CAACM,QAAN,EAAnD;AACA,aAAOD,MAAP;AACH,KALD;AAMH,GAPD;AAQH,CATD;;AAWA,IAAME,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CpB,OAAxE;AACA,IAAMW,KAAK,GAAGd,WAAW,CAACU,WAAD,EAAcW,gBAAgB,CAACnB,eAAe,CAACW,MAAD,EAASJ,KAAT,CAAhB,CAA9B,CAAzB,C,CAEA;;AACAV,QAAQ,CAACyB,MAAT,CAAgB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEV,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAwB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAxB,CAAhB,EAA4DW,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5D;AACAlB,qBAAqB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import from redux\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux'; // helps inject store into components\n\nimport counterReducer from './store/reducers/counter';\nimport resultReducer from './store/reducers/result';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n// add thunk middleware to handle async calls\n// instead of returning an action, it'll return a function that will eventually dispatch an action -> run async code\n\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n    ctr: counterReducer,\n    res: resultReducer\n});\n\n// create a middleware w/ nested functions\nconst logger = store => {\n    return next => {\n        return action => {\n            console.log('[Middleware] is dispatching this action from index.js:', action);\n            const result = next(action);\n            console.log('[Middleware]\\'s next/updated state:', store.getState());\n            return result;\n        }\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\n\n// use Provider to hook the store to the application\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"]},"metadata":{},"sourceType":"module"}