{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\angie\\\\Desktop\\\\REACT\\\\projects\\\\redux\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from './actions';\nvar initialState = {\n  counter: 0,\n  results: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      return _objectSpread({}, state, {\n        counter: state.counter + 1\n      });\n\n    case actionTypes.DECREMENT:\n      return _objectSpread({}, state, {\n        counter: state.counter - 1\n      });\n\n    case actionTypes.ADD:\n      return _objectSpread({}, state, {\n        counter: state.counter + action.value\n      });\n\n    case actionTypes.SUBTRACT:\n      return _objectSpread({}, state, {\n        counter: state.counter - action.value\n      });\n\n    case actionTypes.STORE_RESULT:\n      return _objectSpread({}, state, {\n        // use concat to return a new array to avoid mutating the state\n        results: state.results.concat({\n          id: new Date(),\n          value: state.counter\n        })\n      });\n\n    case actionTypes.DELETE_RESULT:\n      // filter() returns a new array\n      var updatedArr = state.results.filter(function (result) {\n        return result.id !== action.id;\n      });\n      return _objectSpread({}, state, {\n        results: updatedArr\n      });\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:\\Users\\angie\\Desktop\\REACT\\projects\\redux\\src\\store\\reducer.js"],"names":["actionTypes","initialState","counter","results","reducer","state","action","type","INCREMENT","DECREMENT","ADD","value","SUBTRACT","STORE_RESULT","concat","id","Date","DELETE_RESULT","updatedArr","filter","result"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,WAA7B;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CADQ;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;;AAKA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAW,CAACQ,SAAjB;AACI,+BACOH,KADP;AAEIH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAF7B;;AAIJ,SAAKF,WAAW,CAACS,SAAjB;AACI,+BACOJ,KADP;AAEIH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAF7B;;AAIJ,SAAKF,WAAW,CAACU,GAAjB;AACI,+BACOL,KADP;AAEIH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK;AAFpC;;AAIJ,SAAKX,WAAW,CAACY,QAAjB;AACI,+BACOP,KADP;AAEIH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK;AAFpC;;AAIJ,SAAKX,WAAW,CAACa,YAAjB;AACI,+BACOR,KADP;AAEI;AACAF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcW,MAAd,CAAqB;AAAEC,UAAAA,EAAE,EAAE,IAAIC,IAAJ,EAAN;AAAkBL,UAAAA,KAAK,EAAEN,KAAK,CAACH;AAA/B,SAArB;AAHb;;AAKJ,SAAKF,WAAW,CAACiB,aAAjB;AACA;AACI,UAAMC,UAAU,GAAGb,KAAK,CAACF,OAAN,CAAcgB,MAAd,CAAqB,UAAAC,MAAM;AAAA,eAAIA,MAAM,CAACL,EAAP,KAAcT,MAAM,CAACS,EAAzB;AAAA,OAA3B,CAAnB;AACA,+BACOV,KADP;AAEIF,QAAAA,OAAO,EAAEe;AAFb;AA9BR;;AAmCA,SAAOb,KAAP;AACH,CArCD;;AAuCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from './actions';\r\n\r\nconst initialState = {\r\n    counter: 0,\r\n    results: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.INCREMENT: \r\n            return {\r\n                ...state,\r\n                counter: state.counter + 1\r\n            }\r\n        case actionTypes.DECREMENT:\r\n            return {\r\n                ...state,\r\n                counter: state.counter - 1\r\n            }\r\n        case actionTypes.ADD:\r\n            return {\r\n                ...state,\r\n                counter: state.counter + action.value\r\n            }\r\n        case actionTypes.SUBTRACT:\r\n            return {\r\n                ...state,\r\n                counter: state.counter - action.value\r\n            }\r\n        case actionTypes.STORE_RESULT:\r\n            return {\r\n                ...state,\r\n                // use concat to return a new array to avoid mutating the state\r\n                results: state.results.concat({ id: new Date(), value: state.counter }) \r\n            }\r\n        case actionTypes.DELETE_RESULT:\r\n        // filter() returns a new array\r\n            const updatedArr = state.results.filter(result => result.id !== action.id);\r\n            return {\r\n                ...state,\r\n                results: updatedArr\r\n            }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}